nvtboot

Of course. Let's break this down step-by-step. This document is a user guide for a very specific process used by engineers developing products with Novatek's NT9852x series chips.

### High-Level Summary (The "What")

This PDF explains how to use one development board (**EVB1**, acting as a **USB Host/PC**) to program the software onto another, identical but blank, development board (**EVB2**, acting as a **USB Device**). It's like using one phone to load the operating system onto another phone that has no software.

The software that enables this on the host board (EVB1) is called **`nvtboot`**.

---

### Step-by-Step Explanation

Let's walk through the document page by page.

#### **Pages 1-3: Cover, Revision History, and Table of Contents**
*   These are standard document intro pages. The key takeaway is that this is an official guide from Novatek for the `nvtboot` feature on their NT9852x chip series.

#### **Page 4: Introduction and Block Diagram**

*   **1 Introduction:** This section clearly states the goal: Use **EVB1** (in USB **Host** mode) to boot up **EVB2** (in USB **Device** mode).
*   **1.1 Block Diagram:** This is a very simple diagram. It just shows that the two boards are connected by a single USB cable.
    *   **EVB1 (Host)** -> **USB Cable** -> **EVB2 (Device)**
    *   Think of EVB1 as the "teacher" (it has the knowledge/software) and EVB2 as the "student" (it is empty and ready to receive knowledge).

*   **2.1 How to enable nvtboot driver:** This tells the software engineer how to configure the Linux operating system running on EVB1 to support this feature.
    *   They need to go into the kernel configuration menu and ensure `Support for Host-side USB` and the specific `EHCI HCD (USB 2.0) support` are enabled (marked with `<*>` or `<M>` in the list).
    *   **In simple terms:** Before you can use a USB port on a computer, you need to install the driver for it. This section is the instructions for "installing" (compiling in) the driver for the USB host port on EVB1.

#### **Page 5: Preparing Files and Starting the Process**

*   **2.2 Bin files preparation:** This explains what software files need to be placed on EVB1 (e.g., on an SD card) for the process to work. There are three key files:
    1.  **`wrldr528.bin` (Write-Loader):** This is the **first program** sent to EVB2. Its only job is to set up EVB2 to be able to receive the *actual* main software. It's like giving the student (EVB2) a pair of glasses and a pencil so they can properly see and write down the lesson.
    2.  **`FW98528A.bin` (FW Image):** This is the **main firmware**—the actual operating system and application that will run on EVB2. This is the "textbook" for the student.
    3.  **`LD98528A.bin` (Loader Image):** This is an optional secondary loader. For this basic explanation, we can ignore it as it's often not used.

*   **2.3.1 Press Reset Button on EVB2:** This is a crucial hardware step. The engineer must physically press the reset button on the target board (EVB2) *while it is configured to boot from USB*. This makes EVB2 wait for instructions from the USB cable instead of trying to boot from its own empty internal memory. The `'NU'` on the debug console is EVB2's way of saying, _"I'm alive, I'm in USB boot mode, and I'm waiting for instructions."_

#### **Page 6: The Process in Action**

*   **2.3.2 Run nvtboot on EVB1:** Now that EVB2 is waiting, the engineer tells EVB1 to start the process. They do this by running the command **`modprobe ehci_hcd`**. This command loads the USB host driver we configured earlier.
*   The text block below the command is the **log output**, which shows exactly what's happening. Let's decipher it:
    *   `ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver`: The driver loads successfully.
    *   `usb 1-1: new high-speed USB device number 2 using ehci-nvtivot`: EVB1 has detected that a device (EVB2) has been plugged into its USB port.
    *   `nvtboot_probe:device-name = NOVATEK NT98520`: The `nvtboot` software identifies the connected device as the correct chip (NT98520).
    *   `Update write_loader begin` ... `Update write_loader done`: EVB1 sends the `wrldr528.bin` (the "glasses and pencil") to EVB2. EVB2 runs this code.
    *   `usb 1-1: USB disconnect, device number 2`: This is normal! After the write-loader runs on EVB2, it resets itself and re-appears on the USB bus as a different kind of device, ready for the main firmware.
    *   `usb 1-1: new high-speed USB device number 3...`: EVB1 detects EVB2 again, now in its new mode.
    *   `Update FW begin` ... `nvtboot_thread: file /mnt/sd/FW98528A.bin size is 0x01730408` ... `Update FW done`: EVB1 now sends the main firmware file (`FW98528A.bin`, the "textbook") to EVB2. The log even shows the file size. Once done, EVB2 is now fully programmed and should start running its new software.

*   The final note advises that if any errors appear in this log, the engineer should check the files and test EVB2 with a Windows-based tool from Novatek to ensure the hardware itself is not broken.

---

### In-Depth Use Case Example

**Scenario:** A company is manufacturing security cameras using the NT98520 chip.

1.  **Production Line Setup:** The factory has many blank camera boards (like EVB2) fresh from assembly. They have no software. A technician has a single dedicated programming station (like EVB1) connected to a USB hub.
2.  **Preparation:** The technician inserts an SD card into the programming station. On that card are the latest versions of `wrldr528.bin` and `FW98528A.bin` (which contains the camera's video processing software, network stack, etc.).
3.  **Programming:**
    *   A blank camera board is plugged into the USB hub.
    *   Its boot mode is set to USB (often by a physical switch or by the technician holding a button while powering it on—this is the equivalent of "Press Reset Button on EVB2").
    *   The programming station (EVB1) automatically detects it, and the `nvtboot` process runs, sending the software over USB.
    *   The log on the station's screen says `Update FW done`.
    *   The technician unplugs the now-fully-programmed camera board and plugs in the next blank one.

**Why is this useful?**
*   **Speed:** It's much faster than programming each chip individually with a hardware programmer.
*   **Flexibility:** Updating the software on all devices just means replacing the files on the SD card in the programming station. No need to change hardware.
*   **Recovery:** If a camera in the field has corrupted software and can't boot, a technician can use this method with a laptop (acting as EVB1) to reload the software and repair the device without opening it up.

In essence, `nvtboot` is a powerful tool for **development, manufacturing, and field service** for devices based on Novatek's chips.
